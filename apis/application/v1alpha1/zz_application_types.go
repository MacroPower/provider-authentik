/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationObservation struct {
	BackchannelProviders []*float64 `json:"backchannelProviders,omitempty" tf:"backchannel_providers,omitempty"`

	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MetaDescription *string `json:"metaDescription,omitempty" tf:"meta_description,omitempty"`

	MetaIcon *string `json:"metaIcon,omitempty" tf:"meta_icon,omitempty"`

	MetaLaunchURL *string `json:"metaLaunchUrl,omitempty" tf:"meta_launch_url,omitempty"`

	MetaPublisher *string `json:"metaPublisher,omitempty" tf:"meta_publisher,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Defaults to `false`.
	OpenInNewTab *bool `json:"openInNewTab,omitempty" tf:"open_in_new_tab,omitempty"`

	// Defaults to `any`.
	PolicyEngineMode *string `json:"policyEngineMode,omitempty" tf:"policy_engine_mode,omitempty"`

	ProtocolProvider *float64 `json:"protocolProvider,omitempty" tf:"protocol_provider,omitempty"`

	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// Generated.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ApplicationParameters struct {

	// +kubebuilder:validation:Optional
	BackchannelProviders []*float64 `json:"backchannelProviders,omitempty" tf:"backchannel_providers,omitempty"`

	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	MetaDescription *string `json:"metaDescription,omitempty" tf:"meta_description,omitempty"`

	// +kubebuilder:validation:Optional
	MetaIcon *string `json:"metaIcon,omitempty" tf:"meta_icon,omitempty"`

	// +kubebuilder:validation:Optional
	MetaLaunchURL *string `json:"metaLaunchUrl,omitempty" tf:"meta_launch_url,omitempty"`

	// +kubebuilder:validation:Optional
	MetaPublisher *string `json:"metaPublisher,omitempty" tf:"meta_publisher,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	OpenInNewTab *bool `json:"openInNewTab,omitempty" tf:"open_in_new_tab,omitempty"`

	// Defaults to `any`.
	// +kubebuilder:validation:Optional
	PolicyEngineMode *string `json:"policyEngineMode,omitempty" tf:"policy_engine_mode,omitempty"`

	// +kubebuilder:validation:Optional
	ProtocolProvider *float64 `json:"protocolProvider,omitempty" tf:"protocol_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// Generated.
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// ApplicationSpec defines the desired state of Application
type ApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationParameters `json:"forProvider"`
}

// ApplicationStatus defines the observed state of Application.
type ApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Application is the Schema for the Applications API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,authentik}
type Application struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.slug)",message="slug is a required parameter"
	Spec   ApplicationSpec   `json:"spec"`
	Status ApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationList contains a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Application `json:"items"`
}

// Repository type metadata.
var (
	Application_Kind             = "Application"
	Application_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Application_Kind}.String()
	Application_KindAPIVersion   = Application_Kind + "." + CRDGroupVersion.String()
	Application_GroupVersionKind = CRDGroupVersion.WithKind(Application_Kind)
)

func init() {
	SchemeBuilder.Register(&Application{}, &ApplicationList{})
}
