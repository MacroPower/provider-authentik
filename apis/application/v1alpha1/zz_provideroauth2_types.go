/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProviderOAuth2Observation struct {

	// Defaults to `minutes=1`.
	AccessCodeValidity *string `json:"accessCodeValidity,omitempty" tf:"access_code_validity,omitempty"`

	// Defaults to `minutes=10`.
	AccessTokenValidity *string `json:"accessTokenValidity,omitempty" tf:"access_token_validity,omitempty"`

	AuthenticationFlow *string `json:"authenticationFlow,omitempty" tf:"authentication_flow,omitempty"`

	AuthorizationFlow *string `json:"authorizationFlow,omitempty" tf:"authorization_flow,omitempty"`

	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Defaults to `confidential`.
	ClientType *string `json:"clientType,omitempty" tf:"client_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defaults to `true`.
	IncludeClaimsInIDToken *bool `json:"includeClaimsInIdToken,omitempty" tf:"include_claims_in_id_token,omitempty"`

	// Defaults to `per_provider`.
	IssuerMode *string `json:"issuerMode,omitempty" tf:"issuer_mode,omitempty"`

	// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
	JwksSources []*string `json:"jwksSources,omitempty" tf:"jwks_sources,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PropertyMappings []*string `json:"propertyMappings,omitempty" tf:"property_mappings,omitempty"`

	RedirectUris []*string `json:"redirectUris,omitempty" tf:"redirect_uris,omitempty"`

	// Defaults to `days=30`.
	RefreshTokenValidity *string `json:"refreshTokenValidity,omitempty" tf:"refresh_token_validity,omitempty"`

	SigningKey *string `json:"signingKey,omitempty" tf:"signing_key,omitempty"`

	// Defaults to `hashed_user_id`.
	SubMode *string `json:"subMode,omitempty" tf:"sub_mode,omitempty"`
}

type ProviderOAuth2Parameters struct {

	// Defaults to `minutes=1`.
	// +kubebuilder:validation:Optional
	AccessCodeValidity *string `json:"accessCodeValidity,omitempty" tf:"access_code_validity,omitempty"`

	// Defaults to `minutes=10`.
	// +kubebuilder:validation:Optional
	AccessTokenValidity *string `json:"accessTokenValidity,omitempty" tf:"access_token_validity,omitempty"`

	// +kubebuilder:validation:Optional
	AuthenticationFlow *string `json:"authenticationFlow,omitempty" tf:"authentication_flow,omitempty"`

	// +kubebuilder:validation:Optional
	AuthorizationFlow *string `json:"authorizationFlow,omitempty" tf:"authorization_flow,omitempty"`

	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Generated.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// Defaults to `confidential`.
	// +kubebuilder:validation:Optional
	ClientType *string `json:"clientType,omitempty" tf:"client_type,omitempty"`

	// Defaults to `true`.
	// +kubebuilder:validation:Optional
	IncludeClaimsInIDToken *bool `json:"includeClaimsInIdToken,omitempty" tf:"include_claims_in_id_token,omitempty"`

	// Defaults to `per_provider`.
	// +kubebuilder:validation:Optional
	IssuerMode *string `json:"issuerMode,omitempty" tf:"issuer_mode,omitempty"`

	// JWTs issued by keys configured in any of the selected sources can be used to authenticate on behalf of this provider.
	// +kubebuilder:validation:Optional
	JwksSources []*string `json:"jwksSources,omitempty" tf:"jwks_sources,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PropertyMappings []*string `json:"propertyMappings,omitempty" tf:"property_mappings,omitempty"`

	// +kubebuilder:validation:Optional
	RedirectUris []*string `json:"redirectUris,omitempty" tf:"redirect_uris,omitempty"`

	// Defaults to `days=30`.
	// +kubebuilder:validation:Optional
	RefreshTokenValidity *string `json:"refreshTokenValidity,omitempty" tf:"refresh_token_validity,omitempty"`

	// +kubebuilder:validation:Optional
	SigningKey *string `json:"signingKey,omitempty" tf:"signing_key,omitempty"`

	// Defaults to `hashed_user_id`.
	// +kubebuilder:validation:Optional
	SubMode *string `json:"subMode,omitempty" tf:"sub_mode,omitempty"`
}

// ProviderOAuth2Spec defines the desired state of ProviderOAuth2
type ProviderOAuth2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderOAuth2Parameters `json:"forProvider"`
}

// ProviderOAuth2Status defines the observed state of ProviderOAuth2.
type ProviderOAuth2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderOAuth2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderOAuth2 is the Schema for the ProviderOAuth2s API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,authentik}
type ProviderOAuth2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.authorizationFlow)",message="authorizationFlow is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clientId)",message="clientId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   ProviderOAuth2Spec   `json:"spec"`
	Status ProviderOAuth2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderOAuth2List contains a list of ProviderOAuth2s
type ProviderOAuth2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderOAuth2 `json:"items"`
}

// Repository type metadata.
var (
	ProviderOAuth2_Kind             = "ProviderOAuth2"
	ProviderOAuth2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderOAuth2_Kind}.String()
	ProviderOAuth2_KindAPIVersion   = ProviderOAuth2_Kind + "." + CRDGroupVersion.String()
	ProviderOAuth2_GroupVersionKind = CRDGroupVersion.WithKind(ProviderOAuth2_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderOAuth2{}, &ProviderOAuth2List{})
}
