/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExpressionInitParameters struct {

	// (Boolean) Defaults to false.
	// Defaults to `false`.
	ExecutionLogging *bool `json:"executionLogging,omitempty" tf:"execution_logging,omitempty"`

	// (String)
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ExpressionObservation struct {

	// (Boolean) Defaults to false.
	// Defaults to `false`.
	ExecutionLogging *bool `json:"executionLogging,omitempty" tf:"execution_logging,omitempty"`

	// (String)
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ExpressionParameters struct {

	// (Boolean) Defaults to false.
	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	ExecutionLogging *bool `json:"executionLogging,omitempty" tf:"execution_logging,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// ExpressionSpec defines the desired state of Expression
type ExpressionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExpressionParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ExpressionInitParameters `json:"initProvider,omitempty"`
}

// ExpressionStatus defines the observed state of Expression.
type ExpressionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExpressionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Expression is the Schema for the Expressions API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,authentik}
type Expression struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.expression) || (has(self.initProvider) && has(self.initProvider.expression))",message="spec.forProvider.expression is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ExpressionSpec   `json:"spec"`
	Status ExpressionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExpressionList contains a list of Expressions
type ExpressionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Expression `json:"items"`
}

// Repository type metadata.
var (
	Expression_Kind             = "Expression"
	Expression_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Expression_Kind}.String()
	Expression_KindAPIVersion   = Expression_Kind + "." + CRDGroupVersion.String()
	Expression_GroupVersionKind = CRDGroupVersion.WithKind(Expression_Kind)
)

func init() {
	SchemeBuilder.Register(&Expression{}, &ExpressionList{})
}
