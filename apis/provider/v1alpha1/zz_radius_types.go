/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RadiusInitParameters struct {

	// (String) Defaults to 0.0.0.0/0, ::/0.
	// Defaults to `0.0.0.0/0, ::/0`.
	ClientNetworks *string `json:"clientNetworks,omitempty" tf:"client_networks,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RadiusObservation struct {

	// (String)
	AuthorizationFlow *string `json:"authorizationFlow,omitempty" tf:"authorization_flow,omitempty"`

	// (String) Defaults to 0.0.0.0/0, ::/0.
	// Defaults to `0.0.0.0/0, ::/0`.
	ClientNetworks *string `json:"clientNetworks,omitempty" tf:"client_networks,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RadiusParameters struct {

	// (String)
	// +crossplane:generate:reference:type=github.com/MacroPower/provider-authentik/apis/flow/v1alpha1.Flow
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("uuid",true)
	// +kubebuilder:validation:Optional
	AuthorizationFlow *string `json:"authorizationFlow,omitempty" tf:"authorization_flow,omitempty"`

	// Reference to a Flow in flow to populate authorizationFlow.
	// +kubebuilder:validation:Optional
	AuthorizationFlowRef *v1.Reference `json:"authorizationFlowRef,omitempty" tf:"-"`

	// Selector for a Flow in flow to populate authorizationFlow.
	// +kubebuilder:validation:Optional
	AuthorizationFlowSelector *v1.Selector `json:"authorizationFlowSelector,omitempty" tf:"-"`

	// (String) Defaults to 0.0.0.0/0, ::/0.
	// Defaults to `0.0.0.0/0, ::/0`.
	// +kubebuilder:validation:Optional
	ClientNetworks *string `json:"clientNetworks,omitempty" tf:"client_networks,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Sensitive)
	// +kubebuilder:validation:Optional
	SharedSecretSecretRef v1.SecretKeySelector `json:"sharedSecretSecretRef" tf:"-"`
}

// RadiusSpec defines the desired state of Radius
type RadiusSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RadiusParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RadiusInitParameters `json:"initProvider,omitempty"`
}

// RadiusStatus defines the observed state of Radius.
type RadiusStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RadiusObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Radius is the Schema for the Radiuss API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,authentik}
type Radius struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sharedSecretSecretRef)",message="spec.forProvider.sharedSecretSecretRef is a required parameter"
	Spec   RadiusSpec   `json:"spec"`
	Status RadiusStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RadiusList contains a list of Radiuss
type RadiusList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Radius `json:"items"`
}

// Repository type metadata.
var (
	Radius_Kind             = "Radius"
	Radius_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Radius_Kind}.String()
	Radius_KindAPIVersion   = Radius_Kind + "." + CRDGroupVersion.String()
	Radius_GroupVersionKind = CRDGroupVersion.WithKind(Radius_Kind)
)

func init() {
	SchemeBuilder.Register(&Radius{}, &RadiusList{})
}
