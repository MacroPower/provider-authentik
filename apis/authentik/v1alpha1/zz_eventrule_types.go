/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EventRuleInitParameters struct {
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Defaults to `warning`.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	Transports []*string `json:"transports,omitempty" tf:"transports,omitempty"`

	WebhookMapping *string `json:"webhookMapping,omitempty" tf:"webhook_mapping,omitempty"`
}

type EventRuleObservation struct {
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Defaults to `warning`.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	Transports []*string `json:"transports,omitempty" tf:"transports,omitempty"`

	WebhookMapping *string `json:"webhookMapping,omitempty" tf:"webhook_mapping,omitempty"`
}

type EventRuleParameters struct {

	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Defaults to `warning`.
	// +kubebuilder:validation:Optional
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// +kubebuilder:validation:Optional
	Transports []*string `json:"transports,omitempty" tf:"transports,omitempty"`

	// +kubebuilder:validation:Optional
	WebhookMapping *string `json:"webhookMapping,omitempty" tf:"webhook_mapping,omitempty"`
}

// EventRuleSpec defines the desired state of EventRule
type EventRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventRuleParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EventRuleInitParameters `json:"initProvider,omitempty"`
}

// EventRuleStatus defines the observed state of EventRule.
type EventRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventRule is the Schema for the EventRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,authentik}
type EventRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.transports) || (has(self.initProvider) && has(self.initProvider.transports))",message="spec.forProvider.transports is a required parameter"
	Spec   EventRuleSpec   `json:"spec"`
	Status EventRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventRuleList contains a list of EventRules
type EventRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventRule `json:"items"`
}

// Repository type metadata.
var (
	EventRule_Kind             = "EventRule"
	EventRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EventRule_Kind}.String()
	EventRule_KindAPIVersion   = EventRule_Kind + "." + CRDGroupVersion.String()
	EventRule_GroupVersionKind = CRDGroupVersion.WithKind(EventRule_Kind)
)

func init() {
	SchemeBuilder.Register(&EventRule{}, &EventRuleList{})
}
