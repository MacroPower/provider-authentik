/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FlowInitParameters struct {

	// (String) Defaults to none.
	// Defaults to `none`.
	Authentication *string `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) Optional URL to an image which will be used as the background during the flow.
	// Optional URL to an image which will be used as the background during the flow.
	Background *string `json:"background,omitempty" tf:"background,omitempty"`

	// (Boolean) Defaults to true.
	// Defaults to `true`.
	CompatibilityMode *bool `json:"compatibilityMode,omitempty" tf:"compatibility_mode,omitempty"`

	// (String) Defaults to message_continue.
	// Defaults to `message_continue`.
	DeniedAction *string `json:"deniedAction,omitempty" tf:"denied_action,omitempty"`

	// (String)
	Designation *string `json:"designation,omitempty" tf:"designation,omitempty"`

	// (String) Defaults to stacked.
	// Defaults to `stacked`.
	Layout *string `json:"layout,omitempty" tf:"layout,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Defaults to any.
	// Defaults to `any`.
	PolicyEngineMode *string `json:"policyEngineMode,omitempty" tf:"policy_engine_mode,omitempty"`

	// (String)
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type FlowObservation struct {

	// (String) Defaults to none.
	// Defaults to `none`.
	Authentication *string `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) Optional URL to an image which will be used as the background during the flow.
	// Optional URL to an image which will be used as the background during the flow.
	Background *string `json:"background,omitempty" tf:"background,omitempty"`

	// (Boolean) Defaults to true.
	// Defaults to `true`.
	CompatibilityMode *bool `json:"compatibilityMode,omitempty" tf:"compatibility_mode,omitempty"`

	// (String) Defaults to message_continue.
	// Defaults to `message_continue`.
	DeniedAction *string `json:"deniedAction,omitempty" tf:"denied_action,omitempty"`

	// (String)
	Designation *string `json:"designation,omitempty" tf:"designation,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Defaults to stacked.
	// Defaults to `stacked`.
	Layout *string `json:"layout,omitempty" tf:"layout,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Defaults to any.
	// Defaults to `any`.
	PolicyEngineMode *string `json:"policyEngineMode,omitempty" tf:"policy_engine_mode,omitempty"`

	// (String)
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) Generated.
	// Generated.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type FlowParameters struct {

	// (String) Defaults to none.
	// Defaults to `none`.
	// +kubebuilder:validation:Optional
	Authentication *string `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) Optional URL to an image which will be used as the background during the flow.
	// Optional URL to an image which will be used as the background during the flow.
	// +kubebuilder:validation:Optional
	Background *string `json:"background,omitempty" tf:"background,omitempty"`

	// (Boolean) Defaults to true.
	// Defaults to `true`.
	// +kubebuilder:validation:Optional
	CompatibilityMode *bool `json:"compatibilityMode,omitempty" tf:"compatibility_mode,omitempty"`

	// (String) Defaults to message_continue.
	// Defaults to `message_continue`.
	// +kubebuilder:validation:Optional
	DeniedAction *string `json:"deniedAction,omitempty" tf:"denied_action,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Designation *string `json:"designation,omitempty" tf:"designation,omitempty"`

	// (String) Defaults to stacked.
	// Defaults to `stacked`.
	// +kubebuilder:validation:Optional
	Layout *string `json:"layout,omitempty" tf:"layout,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Defaults to any.
	// Defaults to `any`.
	// +kubebuilder:validation:Optional
	PolicyEngineMode *string `json:"policyEngineMode,omitempty" tf:"policy_engine_mode,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

// FlowSpec defines the desired state of Flow
type FlowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlowParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FlowInitParameters `json:"initProvider,omitempty"`
}

// FlowStatus defines the observed state of Flow.
type FlowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Flow is the Schema for the Flows API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,authentik}
type Flow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.designation) || (has(self.initProvider) && has(self.initProvider.designation))",message="spec.forProvider.designation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	Spec   FlowSpec   `json:"spec"`
	Status FlowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlowList contains a list of Flows
type FlowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Flow `json:"items"`
}

// Repository type metadata.
var (
	Flow_Kind             = "Flow"
	Flow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Flow_Kind}.String()
	Flow_KindAPIVersion   = Flow_Kind + "." + CRDGroupVersion.String()
	Flow_GroupVersionKind = CRDGroupVersion.WithKind(Flow_Kind)
)

func init() {
	SchemeBuilder.Register(&Flow{}, &FlowList{})
}
